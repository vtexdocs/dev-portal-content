---
title: "GraphQL authorization in IO apps"
slug: "graphql-authorization-in-io-apps"
hidden: false
excerpt: "Learn to implement and use protected GraphQL operations with IO apps."
createdAt: "2025-06-30T14:00:00.000Z"
updatedAt: "2025-06-30T14:00:00.000Z"
---
Authenticated GraphQL requests are crucial for securing access to your VTEX IO app's data and functions. Authentication ensures that only authorized users or applications can interact with your GraphQL endpoints, protecting sensitive information and preventing unauthorized actions. In addition to authentication, app developers can implement authorization to control who can access specific resources and what operations they can perform.

GraphQL authorization in VTEX IO apps works with auth tokens and [directives](https://graphql.org/learn/schema/#directives) within your GraphQL schema, enabling fine-grained access control based on [License Manager resources](https://help.vtex.com/en/tutorial/license-manager-resources--3q6ztrC8YynQf6rdc6euk3). The app identifies the requester by the [auth token](https://developers.vtex.com/docs/guides/app-authentication-using-auth-tokens) in [apps](https://developers.vtex.com/docs/guides/vtex-io-documentation-what-is-a-vtex-app) or the [user token](https://developers.vtex.com/docs/guides/api-authentication-using-user-tokens) in API calls. These tokens have [roles](https://help.vtex.com/en/tutorial/roles--7HKK5Uau2H6wxE1rH5oRbc) or [policies](https://developers.vtex.com/docs/guides/vtex-io-documentation-policies) associated with VTEX resources.

In this guide, you will learn how to:

1. Implement protected GraphQL API operations in apps using authorization.
2. Make authorized requests from apps.
3. Make external requests with appropriate authorization.

> ℹ️ Only VTEX apps, Admin users, and [application keys](https://developers.vtex.com/docs/guides/api-authentication-using-api-keys) can be authorized to make GraphQL requests, as they must be associated with a role or policy that grants access to a License Manager resource. Store users don't have this type of access.

## Implementing GraphQL API authorization in apps

The `@auth` directive has different implementation methods depending on the builder version.

For the builder version `1.x`, the directive is optional. If a query or mutation doesn't have the directive, it's considered public by default. For the builder version `2.x`, the directive is mandatory.

To enable authorization, you must add the `@auth` directive to the specific fields or operations in your GraphQL schema that need protection. This directive ensures that only requesters with access to the corresponding [License Manager resource](https://help.vtex.com/en/tutorial/license-manager-resources--3q6ztrC8YynQf6rdc6euk3) are allowed to execute the operation.

The `@auth` directive uses the following arguments:

<table>
  <thead>
    <tr>
      <th>Argument</th>
      <th>Description</th>
      <th><a href="https://developers.vtex.com/docs/guides/vtex-io-documentation-graphql-builder#versioning" target="_blank">Builder version</a> details</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td><code>scope</code></td>
      <td>
The authorization scope of the query or mutation. It has two possible values:
        <ul>
          <li><code>PUBLIC</code>: The query is public, so it doesn't require any authorization. This scope is mostly used for shoppers browsing a store.</li>
          <li><code>PRIVATE</code>: The query is private, which requires authorization for a specific License Manager resource and product. This scope should be used for scenarios other than store browsing by a shopper, such as in the Admin.</li>
        </ul>
      </td>
      <td>Works only on version <code>2.x</code>, and is mandatory.</td>
    </tr>
    <tr>
      <td><code>productCode</code></td>
      <td>The numeric code that identifies the product in License Manager (for example, <code>"66"</code> for <b>VTEX IO</b>). See the product codes in the <b>Product ID</b> column of the table in <a href="https://help.vtex.com/en/tutorial/license-manager-resources--3q6ztrC8YynQf6rdc6euk3" target="_blank">License Manager resources</a>.</td>
      <td>Works on versions <code>1.x</code> and <code>2.x</code>. For <code>2.x</code>, this argument is mandatory if scope is set to <code>PRIVATE</code>.</td>
    </tr>
    <tr>
      <td><code>resourceCode</code></td>
      <td>The License Manager resource identifier (for example, <code>"workspace-read-write"</code> for <b>Workspace CRUD</b>). See the resource codes in the <b>Key</b> column of the table in <a href="https://help.vtex.com/en/tutorial/license-manager-resources--3q6ztrC8YynQf6rdc6euk3" target="_blank">License Manager resources</a>.</td>
      <td>Works on versions <code>1.x</code> and <code>2.x</code>. For <code>2.x</code>, this argument is mandatory if scope is set to <code>PRIVATE</code>.</td>
    </tr>
  </tbody>
</table>

Examples:

With version `1.x`:

```graphql
type Mutation {
  createWorkspace(account: String, workspace: String): GenericResponse
    @auth(productCode: "66", resourceCode: "workspace-read-write")
}
```

Public with version `2.x`:

```graphql
type Query {
  source(id: ID!): String
    @auth(scope: PUBLIC)
}
```

In this example, there is no verification of whether the requester has access to a specific License Manager resource.

Private with version `2.x`:

```graphql
type Mutation {
  createWorkspace(account: String, workspace: String): GenericResponse
    @auth(scope: PRIVATE, productCode: "66", resourceCode: "workspace-read-write")
}
```

In this example, when the user requests the `createWorkspace` mutation, VTEX checks if the user has access to the `workspace-read-write` resource from License Manager. If the user has this access, the endpoint will be processed as intended. Otherwise, the request will be denied.

You can see the available products and resources in [License Manager resources](https://help.vtex.com/en/tutorial/license-manager-resources--3q6ztrC8YynQf6rdc6euk3).

### Error scenarios

If a developer tries to build an app with the GraphQL builder `2.x`, the [VTEX IO CLI](https://developers.vtex.com/docs/guides/vtex-io-documentation-vtex-io-cli-installation-and-command-reference) will show an error message in the following cases:

- Any query or mutation lacks the `@auth` directive.
- The `scope` argument is missing in the directive.
- When `scope` is `PRIVATE` in the directive and the `productCode` or `resourceCode` arguments are missing.

![GraphQL auth directive error](../../images/graphql-auth-directive-error.png)

## Making requests to protected GraphQL APIs from a VTEX IO app

When making requests to a protected GraphQL API from another VTEX IO app, you must export a [custom Client](https://developers.vtex.com/docs/guides/vtex-io-documentation-how-to-create-and-use-clients) that extends the `AppGraphQLClient` type and set the `VtexIdclientAutCookie` header with the auth token in the [Client](https://developers.vtex.com/docs/guides/vtex-io-documentation-clients). The requester must have the role or policy that includes the `resourceCode` and `productCode` defined in the target operation's `@auth` directive.

Declare the token based on the requester's context:

- **App**: `ctx.authToken`.
- **Admin user**: `ctx.adminUserAuthToken`.

Example

```typescript node/clients/catalogGraphQL/index.ts mark=9
import { AppGraphQLClient, InstanceOptions, IOContext } from '@vtex/api'
export class CatalogGQL extends AppGraphQLClient {
    constructor(ctx: IOContext, options?: InstanceOptions) {
        super('vtex.catalog-graphql@1.x', ctx, {
            ...options,
      headers: {
                ...options?.headers,
        VtexIdclientAutCookie: ctx.adminUserAuthToken,
        },
      })
    }
  }
```

For details about token types, see [App authentication using auth tokens](https://developers.vtex.com/docs/guides/app-authentication-using-auth-tokens).

> ⚠️ Use the user token (Admin) whenever possible to properly identify the requester. The app token (`ctx.authToken`) should only be used when the user can't access the requested service.

## Making requests to protected GraphQL APIs of apps

When making external requests to a GraphQL API of an app, include the [user token](https://developers.vtex.com/docs/guides/api-authentication-using-user-tokens) in the `VtexIdclientAutCookie` HTTP header. The requester must have a role that includes the resource and product defined in the endpoint's `@auth` directive.

Example (cURL):

```sh terminal mark=4
curl -X POST \
  'https://https://app.io.vtex.com/vtex.rewriter/v1/{account}/_v/graphql' \
    -H 'Content-Type: application/json' \
    -H 'VtexIdclientAutCookie: {your_user_token}' \
    -d '{
      "query": "
          mutation SaveInternal($route: InternalInput!) {
              internal {
                  save(route: $route) {
                      from
                        id
                        type
                        binding
                        resolveAs
                        origin
                      }
                  }
              }
          ",
        "variables": {
          "route": {
              "from": "/old-path",
                "declarer": "vtex.store@2.x",
                "type": "redirect",
                "id": "custom-redirect-old-path",
                "binding": "your-binding-id",
                "resolveAs": "/new-path",
                "origin": "internal",
                "disableSitemapEntry": false
              }
          }
      }'
  ```

> ⚠️ You can make GraphQL requests with GraphQL IDEs that support custom HTTP headers, such as the [one in the VTEX Admin](https://developers.vtex.com/docs/guides/graphql-ide). Not all GraphQL IDEs allow setting authentication headers, which may prevent requests to protected operations from being executed successfully.
